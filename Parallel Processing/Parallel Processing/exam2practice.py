1. Write three issues of coordinating processes or threads...
2. List the four steps to parallelize something...
3. List the three sources of cache incoherence and provide a solution for each...
4. Name the two types of communication methods...
5. List the four states of the MESI Protocal...
6. Explain sharing data among threads in Java Threads...
7. Read-Write Locks are an example of CREW, explain how they work...
8. Provide definitions to or explain the following concepts...
	a. Cache Coherence...
	b. Snooping...
	c. DSM...
	d. MESI Protocal...
	e. SI-Protocal...
	f. Shared and Private Variables...
	g. Nondeterminism...
	h. PGAS...
	i. False Sharing...
	j. Busy-Waiting...
	k. Mutexes...
	l. Producer-Consumer Synchronization...
	m. Barriers...
	o. Condition Variables...
	p. Temporal Locality and Spatial Locality...
	q. Home Nodes, Local Nodes, and Remote Nodes...
9. Compare and Contrast. What does a process contain? What does a thread contain?...
10. Write a sample SPMD code for message-passing API. In the example process_0 sends message to process_1 which displays the recieved message...
11. Implement a functionally equivalent program to the previous but using shared-memory instead...
12. Let Ts, Tp, To, P be serial_time, parallel_time, time_overhead, and the number of processors respectively...
	a. Show the formula for ideal speedup using only the above terms...
	b. Show the formula for ideal efficiency using only the above terms...
	c. Show the formula for effective speedup using only the above terms...
	d. Show the formula for effective efficiency using only the above terms...
13. Write Amdahl's Law...
14. Using Amdahl's Law Solve the Following Problem...
	In a serial program a for-loop consumes 60% of the entire program time(40 seconds)
	the for loop is parallelized with 4 threads and efficiency 1.
	What is the speedup of parallelizing it?...
15. Suppose Ts = n and Tp = n/P + 2P. If we increase P by a factor of k, find a formula for how much we'll need to increase n in order to maintain constant (same) efficiency...
16. Describe "strongly scalable program"...
17. Describe "weakly scalable program"...
18. Consider the Following Code...
	factor = 1.0
	sum = 0.0
	for(i = 0;i<n;i++,factor *= -1)
		sum += factor(2 * i + 1)
	pi = 4.0 * sum
	
	Write a code segment parallelizing the summation...
19. Utilizing Pthreads, provide a semaphore solution to producer consumer synchronization...
20. Demonstrate a code segment implementing Barrier with Busy-Waiting and a Mutex...
21. Demonstrate a code segment implementing Barrier with a Semaphore...
22. Demonstrate a code segment implementing Barrier with a Condition Variable...